import asyncio
import os
import json
import logging
import requests
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message, BotCommand, KeyboardButton, ReplyKeyboardMarkup
from aiogram.filters import Command
from dotenv import load_dotenv
import base64

load_dotenv()

TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
LEAKCHECK_API_KEY = os.getenv("LEAKCHECK_API_KEY")
VIRUSTOTAL_API_KEY = os.getenv("VIRUSTOTAL_API_KEY")
IPQS_API_KEY = os.getenv("IPQS_API_KEY")

bot = Bot(token=TOKEN)
dp = Dispatcher()

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

SUBSCRIBERS_FILE = "subscribers.json"
HISTORY_FILE = "history.json"
def load_subscribers():
    try:
        if os.path.exists(SUBSCRIBERS_FILE):
            with open(SUBSCRIBERS_FILE, "r") as file:
                return json.load(file)
        return []
    except (json.JSONDecodeError, FileNotFoundError) as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {e}")
        return []

def save_subscribers(subscribers):
    try:
        with open(SUBSCRIBERS_FILE, "w") as file:
            json.dump(subscribers, file, indent=4)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {e}")

def load_history():
    try:
        if os.path.exists(HISTORY_FILE):
            with open(HISTORY_FILE, "r") as file:
                return json.load(file)
        return {}
    except (json.JSONDecodeError, FileNotFoundError) as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
        return {}

def save_history(history):
    try:
        with open(HISTORY_FILE, "w") as file:
            json.dump(history, file, indent=4)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {e}")

def add_to_history(user_id, data_type, value):
    history = load_history()
    user_id_str = str(user_id)
    
    if user_id_str not in history:
        history[user_id_str] = {"email": [], "ip": [], "phone": []}
    
    if value not in history[user_id_str][data_type]:
        history[user_id_str][data_type].append(value)
    
    save_history(history)

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã, –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤ –±–æ—Ç–µ
async def set_bot_commands():
    commands = [
        BotCommand(command="/start", description="–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º"),
        BotCommand(command="/status", description="–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –∏—Å—Ç–æ—Ä–∏—é")
    ]
    await bot.set_my_commands(commands)
    logging.info("–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∫–æ–º–∞–Ω–¥—ã /start –∏ /status")

    # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –º–µ—Ç–æ–¥–µ main
async def main():
    logging.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    await set_bot_commands()
    logging.info("–ë–æ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª –∫–æ–º–∞–Ω–¥—ã.")
    await dp.start_polling(bot)

# –ì–ª–∞–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞ —Å—Ç–∞—Ä—Ç
start_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"), KeyboardButton(text="üö´ –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")],
        [KeyboardButton(text="üí° –°–æ–≤–µ—Ç—ã –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")],
        [KeyboardButton(text="üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ URL")],
        [KeyboardButton(text="üìß –ü—Ä–æ–≤–µ—Ä–∫–∞ Email")],
        [KeyboardButton(text="üì± –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞")],
        [KeyboardButton(text="üåê –ü—Ä–æ–≤–µ—Ä–∫–∞ IP")],
        [KeyboardButton(text="üîê 2FA Info")]
    ],
    resize_keyboard=True
)

# /start
@dp.message(Command("start"))
async def start(message: Message):
    try:
        await message.answer(
            "üîê –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∑–∞—â–∏—Ç—ã –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –æ–ø—Ü–∏–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:\n",
            reply_markup=start_keyboard
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ /start: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.message(lambda message: message.text == "üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
async def subscribe(message: Message):
    try:
        subscribers = load_subscribers()
        if message.from_user.id not in subscribers:
            subscribers.append(message.from_user.id)
            save_subscribers(subscribers)
            await message.answer("‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö —É—Ç–µ—á–∫–∞—Ö!")
        else:
            await message.answer("‚ö†Ô∏è –í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∫–µ: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.message(lambda message: message.text == "üö´ –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
async def unsubscribe(message: Message):
    try:
        subscribers = load_subscribers()
        if message.from_user.id in subscribers:
            subscribers.remove(message.from_user.id)
            save_subscribers(subscribers)
            await message.answer("‚úÖ –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.")
        else:
            await message.answer("‚ö†Ô∏è –í—ã –Ω–µ –±—ã–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω—ã.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø–∏—Å–∫–µ: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.message(Command("status"))
async def status(message: Message):
    logging.info("–ö–æ–º–∞–Ω–¥–∞ /status –ø–æ–ª—É—á–µ–Ω–∞")
    subscribers = load_subscribers()
    history = load_history()
    user_id_str = str(message.from_user.id)
    
    is_subscribed = "‚úÖ –ü–æ–¥–ø–∏—Å–∞–Ω—ã" if message.from_user.id in subscribers else "‚ùå –ù–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã"
    
    # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_history = history.get(user_id_str, {"email": [], "ip": [], "phone": []})
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–∫–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞
    email_list = "\n".join(user_history["email"]) if user_history["email"] else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
    ip_list = "\n".join(user_history["ip"]) if user_history["ip"] else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
    phone_list = "\n".join(user_history["phone"]) if user_history["phone"] else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
    
    response = f"üìä –í–∞—à —Å—Ç–∞—Ç—É—Å:\nüîî –ü–æ–¥–ø–∏—Å–∫–∞: {is_subscribed}\n\nüìß –ò—Å—Ç–æ—Ä–∏—è email:\n{email_list}\n\nüåê –ò—Å—Ç–æ—Ä–∏—è IP:\n{ip_list}\n\nüì± –ò—Å—Ç–æ—Ä–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤:\n{phone_list}"
    
    await message.answer(response)


@dp.message(Command("help"))
async def help_command(message: Message):
    await message.answer("–ö–æ–º–∞–Ω–¥—ã –¥–æ—Å—Ç—É–ø–Ω—ã: /start, /status")

async def send_notifications():
    while True:
        await asyncio.sleep(3600)
        subscribers = load_subscribers()
        if subscribers:
            for user_id in subscribers:
                try:
                    await bot.send_message(user_id, "‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –Ω–æ–≤–∞—è —É—Ç–µ—á–∫–∞ –¥–∞–Ω–Ω—ã—Ö.")
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")


async def main():
    await set_bot_commands()
    asyncio.create_task(send_notifications())
    await dp.start_polling(bot)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
@dp.message(lambda message: message.text == "üí° –°–æ–≤–µ—Ç—ã –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
async def send_tips(message: Message):
    tips = [
        "‚úÖ –ò—Å–ø–æ–ª—å–∑—É–π —Å–ª–æ–∂–Ω—ã–µ –ø–∞—Ä–æ–ª–∏ –∏ –º–µ–Ω–µ–¥–∂–µ—Ä—ã –ø–∞—Ä–æ–ª–µ–π.",
        "‚úÖ –í–∫–ª—é—á–∏ –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω—É—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é (2FA).",
        "‚úÖ –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –ø–µ—Ä–µ—Ö–æ–¥–∏ –ø–æ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–º —Å—Å—ã–ª–∫–∞–º.",
        "‚úÖ –†–µ–≥—É–ª—è—Ä–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–π —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –Ω–∞ —É—Ç–µ—á–∫–∏.",
        "‚úÖ –ù–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–π —Å–æ–º–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."
    ]
    await message.answer("\n".join(tips))

@dp.message(lambda message: message.text == "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ URL")
async def check_url(message: Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ URL –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:")

@dp.message(lambda message: message.text == "üìß –ü—Ä–æ–≤–µ—Ä–∫–∞ Email")
async def check_email(message: Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ email –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:")

@dp.message(lambda message: message.text == "üì± –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
async def check_phone(message: Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:")

@dp.message(lambda message: message.text == "üåê –ü—Ä–æ–≤–µ—Ä–∫–∞ IP")
async def check_ip(message: Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ IP-–∞–¥—Ä–µ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:")

@dp.message(lambda message: message.text == "üîê 2FA Info")
async def send_2fa_info(message: Message):
    await message.answer(
        "üîê –î–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è (2FA) ‚Äî —ç—Ç–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏, "
        "–∫–æ—Ç–æ—Ä—ã–π —Ç—Ä–µ–±—É–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ª–∏—á–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –≤—Ö–æ–¥–µ, –ø–æ–º–∏–º–æ –ø–∞—Ä–æ–ª—è.\n\n"
        "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –≤–∫–ª—é—á–∏—Ç—å 2FA –Ω–∞ –≤—Å–µ—Ö –≤–∞—à–∏—Ö –∞–∫–∫–∞—É–Ω—Ç–∞—Ö, —á—Ç–æ–±—ã –ø–æ–≤—ã—Å–∏—Ç—å –∏—Ö –∑–∞—â–∏—Ç—É.\n\n"
        "–î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–∞—Ö:\n"
        "- üì± [Google](https://myaccount.google.com/security) - –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è Google –∞–∫–∫–∞—É–Ω—Ç–æ–≤\n"
        "- üîµ [Facebook](https://www.facebook.com/settings?tab=security) - –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è Facebook\n"
        "- üê¶ [Twitter](https://twitter.com/settings/security) - –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è Twitter\n"
        "- üì± [Telegram](https://my.telegram.org/auth) - –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è Telegram\n"
        "- üéÆ [Steam](https://steamcommunity.com/id/me/edit/settings) - –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è Steam\n"
        "- ü¶∏‚Äç‚ôÇÔ∏è [VKontakte](https://vk.com/settings) - –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –í–ö–æ–Ω—Ç–∞–∫—Ç–µ"
    )

# –ü—Ä–æ–≤–µ—Ä–∫–∞ email –Ω–∞ —É—Ç–µ—á–∫—É –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ LeakCheck
async def check_data_breach(email):
    try:
        url = f"https://leakcheck.io/api?key={LEAKCHECK_API_KEY}&check={email}"
        logging.info(f"–ó–∞–ø—Ä–æ—Å –∫ LeakCheck –¥–ª—è email: {email}")  # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
        response = requests.get(url)
        
        if response.status_code == 403:
            logging.error(f"–û—à–∏–±–∫–∞ 403: –î–æ—Å—Ç—É–ø –∫ API LeakCheck –∑–∞–ø—Ä–µ—â–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å API-–∫–ª—é—á.")
            return False
        if response.status_code == 200:
            data = response.json()
            logging.info(f"–û—Ç–≤–µ—Ç –æ—Ç LeakCheck: {data}")  # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
            
            if data.get("success") and data.get("found"):
                add_to_history(user_id=email, data_type="email", value=email)
                return True  # Email –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ —É—Ç–µ—á–µ–∫
            else:
                return False  # Email –Ω–µ –Ω–∞–π–¥–µ–Ω
        else:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ LeakCheck: {response.status_code}")
            return False
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —É—Ç–µ—á–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False


# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–∞ —É—Ç–µ—á–∫—É –¥–∞–Ω–Ω—ã—Ö
async def check_phone_breach(phone):
    try:
        url = f"https://leakcheck.io/api?key={LEAKCHECK_API_KEY}&check={phone}"
        response = requests.get(url)
        data = response.json()

        if data.get("success") and data.get("found"):
            add_to_history(user_id=phone, data_type="phone", value=phone)
            return True  # –¢–µ–ª–µ—Ñ–æ–Ω –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ —É—Ç–µ—á–µ–∫
        return False  # –¢–µ–ª–µ—Ñ–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —É—Ç–µ—á–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

# –ü—Ä–æ–≤–µ—Ä–∫–∞ URL —á–µ—Ä–µ–∑ VirusTotal API
async def check_url_virustotal(url):
    try:
        # –ö–æ–¥–∏—Ä—É–µ–º URL –≤ base64
        encoded_url = base64.urlsafe_b64encode(url.encode()).decode().strip("=")

        headers = {
            "x-apikey": VIRUSTOTAL_API_KEY
        }
        vt_url = f"https://www.virustotal.com/api/v3/urls/{encoded_url}"
        response = requests.get(vt_url, headers=headers)
        
        if response.status_code == 200:
            data = response.json()
            malicious = data['data']['attributes']['last_analysis_stats']['malicious']
            if malicious > 0:
                return "‚ùå –°—Å—ã–ª–∫–∞ –æ–ø–∞—Å–Ω–∞: –Ω–∞–π–¥–µ–Ω –≤–∏—Ä—É—Å!"
            else:
                return "‚úÖ –°—Å—ã–ª–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–∞."
        else:
            return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Å—ã–ª–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å VirusTotal: {e}")
        return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Å—ã–ª–∫–∏."

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏ IP-–∞–¥—Ä–µ—Å–∞ —á–µ—Ä–µ–∑ IPQualityScore API
async def check_ip_reputation(ip_address):
    try:
        url = f"https://ipqualityscore.com/api/json/ip/{IPQS_API_KEY}/{ip_address}"
        response = requests.get(url)
        data = response.json()
        
        if data.get("success", False):
            risk = data.get("fraud_score", 0)
            if risk > 80:
                add_to_history(user_id=ip_address, data_type="ip", value=ip_address)
                return f"‚ùå IP-–∞–¥—Ä–µ—Å {ip_address} –∏–º–µ–µ—Ç –≤—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫: {risk}/100."
            elif risk > 50:
                add_to_history(user_id=ip_address, data_type="ip", value=ip_address)
                return f"‚ö†Ô∏è IP-–∞–¥—Ä–µ—Å {ip_address} –∏–º–µ–µ—Ç —Å—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫: {risk}/100."
            else:
                add_to_history(user_id=ip_address, data_type="ip", value=ip_address)
                return f"‚úÖ IP-–∞–¥—Ä–µ—Å {ip_address} –±–µ–∑–æ–ø–∞—Å–µ–Ω: {risk}/100."
        else:
            return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ IP-–∞–¥—Ä–µ—Å–∞."
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ IP-–∞–¥—Ä–µ—Å–∞: {e}")
        return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ IP-–∞–¥—Ä–µ—Å–∞."

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–Ω–æ–ø–æ–∫
@dp.message(lambda message: message.text == "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ URL")
async def handle_url_check(message: Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ URL –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:")

@dp.message(lambda message: message.text == "üìß –ü—Ä–æ–≤–µ—Ä–∫–∞ Email")
async def handle_email_check(message: Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ email –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:")

@dp.message(lambda message: message.text == "üì± –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
async def handle_phone_check(message: Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:")

@dp.message(lambda message: message.text == "üåê –ü—Ä–æ–≤–µ—Ä–∫–∞ IP")
async def handle_ip_check(message: Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ IP-–∞–¥—Ä–µ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
@dp.message(lambda message: message.text)
async def handle_data_input(message: Message):
    text = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ email
    if "@" in text:
        is_breached = await check_data_breach(text)
        if is_breached:
            await message.answer(f"‚ö†Ô∏è –≠—Ç–æ—Ç email –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ —É—Ç–µ—á–µ–∫! –°—Ä–æ—á–Ω–æ —Å–º–µ–Ω–∏—Ç–µ –ø–∞—Ä–æ–ª—å.")
        else:
            await message.answer(f"‚úÖ Email {text} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —É—Ç–µ—á–∫–∞—Ö.")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    elif text.isdigit() and len(text) >= 10:
        is_breached = await check_phone_breach(text)
        if is_breached:
            await message.answer(f"‚ö†Ô∏è –≠—Ç–æ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ —É—Ç–µ—á–µ–∫! –°—Ä–æ—á–Ω–æ –ø—Ä–∏–º–∏—Ç–µ –º–µ—Ä—ã.")
        else:
            await message.answer(f"‚úÖ –¢–µ–ª–µ—Ñ–æ–Ω {text} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —É—Ç–µ—á–∫–∞—Ö.")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ URL
    elif text.startswith("http"):
        safety_message = await check_url_virustotal(text)
        await message.answer(safety_message)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ IP
    elif text.count(".") == 3 and all(part.isdigit() for part in text.split(".")):
        result = await check_ip_reputation(text)
        await message.answer(result)
    else:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    await set_bot_commands()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())